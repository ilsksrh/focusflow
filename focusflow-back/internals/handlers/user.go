package handlers

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"path/filepath"

	"focusflow/internals/db"
	"focusflow/internals/services"
	"focusflow/internals/utils"
)

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func UpdateProfile(w http.ResponseWriter, r *http.Request) {
	user, err := utils.GetCurrentUser(r)
	if err != nil {
		utils.RespondWithError(w, http.StatusUnauthorized, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	var input services.UpdateProfileInput
	if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π JSON")
		return
	}

	if err := services.UpdateUserProfile(&user, input); err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, err.Error())
		return
	}

	utils.RespondWithJSON(w, http.StatusOK, map[string]string{"message": "–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω"})
}

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
func ChangePassword(w http.ResponseWriter, r *http.Request) {
	user, err := utils.GetCurrentUser(r)
	if err != nil {
		utils.RespondWithError(w, http.StatusUnauthorized, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	var input services.ChangePasswordInput
	if err := json.NewDecoder(r.Body).Decode(&input); err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON")
		return
	}

	if err := services.ChangeUserPassword(&user, input); err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, err.Error()) // üëà –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
		return
	}

	utils.RespondWithJSON(w, http.StatusOK, map[string]string{"message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω"})
}


// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
func UploadProfilePicture(w http.ResponseWriter, r *http.Request) {
	user, err := utils.GetCurrentUser(r)
	if err != nil {
		utils.RespondWithError(w, http.StatusUnauthorized, "–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
		return
	}

	// –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
	if err := r.ParseMultipartForm(10 << 20); err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã")
		return
	}

	file, handler, err := r.FormFile("profile_picture")
	if err != nil {
		utils.RespondWithError(w, http.StatusBadRequest, "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
		return
	}
	defer file.Close()

	// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ uploads —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat("uploads"); os.IsNotExist(err) {
		if err := os.Mkdir("uploads", os.ModePerm); err != nil {
			utils.RespondWithError(w, http.StatusInternalServerError, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É uploads")
			return
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	filename := fmt.Sprintf("uploads/%s", filepath.Base(handler.Filename))
	dst, err := os.Create(filename)
	if err != nil {
		utils.RespondWithError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
		return
	}
	defer dst.Close()

	if _, err := io.Copy(dst, file); err != nil {
		utils.RespondWithError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	user.ProfilePicture = filename
	if err := db.DB.Save(&user).Error; err != nil {
		utils.RespondWithError(w, http.StatusInternalServerError, "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}

	utils.RespondWithJSON(w, http.StatusOK, map[string]string{
		"message": "–§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
		"path":    filename,
	})
}
